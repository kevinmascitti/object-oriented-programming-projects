package diet;

import java.sql.Timestamp;
import java.util.Collection;
import java.util.SortedMap;
import java.util.TreeMap;

/**
 * Represents the main class in the
 * take-away system.
 * 
 * It allows adding restaurant, users, and creating orders.
 *
 */
public class Takeaway {
	
//	Comparator cmp = new Comparator() {
//		public int compare (User a, User b) {
//			String first = a.toString();
//			String second = b.toString();
//			return first.compareTo(second);
//		}
//	};
	
	private SortedMap<String,Restaurant> restaurants = new TreeMap<>();
	private SortedMap<String,User> users = new TreeMap<>( (a, b) -> {return a.compareTo(b);} );

	/**
	 * Adds a new restaurant to the take-away system
	 * 
	 * @param r the restaurant to be added
	 */
	public void addRestaurant(Restaurant r) {
		restaurants.putIfAbsent(r.getName(), r);
	}
	
	/**
	 * Returns the collections of restaurants
	 * 
	 * @return collection of added restaurants
	 */
	public Collection<String> restaurants() {
		return restaurants.keySet();
	}
	
	/**
	 * Define a new user
	 * 
	 * @param firstName first name of the user
	 * @param lastName  last name of the user
	 * @param email     email
	 * @param phoneNumber telephone number
	 * @return
	 */
	public User registerUser(String firstName, String lastName, String email, String phoneNumber) {
		User u = new User(firstName, lastName, email, phoneNumber);
		users.put(u.toString(), u);
		return u;
	}
	
	/**
	 * Gets the collection of registered users
	 * 
	 * @return the collection of users
	 */
	public Collection<User> users(){
		return users.values();
	}
	
	/**
	 * Create a new order by a user to a given restaurant.
	 * 
	 * The order is initially empty and is characterized
	 * by a desired delivery time. 
	 * 
	 * @param user				user object
	 * @param restaurantName	restaurant name
	 * @param h					delivery time hour
	 * @param m					delivery time minutes
	 * @return
	 */
	public Order createOrder(User user, String restaurantName, int h, int m) {
		Restaurant restaurant = restaurants.get(restaurantName);
		String time = h+":"+m;
		Timestamp t = Timestamp.valueOf(time);
		String[] hours = restaurant.getHours();
		
		for(int i = 0; i<hours.length; i=i+2) {
			Timestamp t1 = Timestamp.valueOf(hours[i]);
			Timestamp t2 = Timestamp.valueOf(hours[i+1]);
			if(t.after(t1) && t.before(t2)) {
				break;
			}
			else if(t.before(t1) && t.before(t2)) {
				t = t1;
				break;
			}
		}
		Order o = new Order(user, restaurant, t);
		user.orders.add(o);
		restaurant.orders.add(o);
		
		return o;
	}
	
	/**
	 * Retrieves the collection of restaurant that are open
	 * at the given time.
	 * 
	 * @param time time to check open
	 * 
	 * @return collection of restaurants
	 */
	public Collection<Restaurant> openedRestaurants(String time){
		return null;
	}

	
	
}
