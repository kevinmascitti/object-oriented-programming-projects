package managingProperties;

import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.SortedMap;
import java.util.TreeMap;
import java.util.stream.Collectors;

public class PropertyManager {
	
	Map<String,Building> edifici = new TreeMap<>();
	private Map<String, Owner> proprietari = new TreeMap<>();

	/**
	 * Add a new building 
	 */
	public void addBuilding(String building, int n) throws PropertyException {
		Building b = new Building(building, n);
		if(edifici.containsKey(building) || n<1 || n>100)
			throw new PropertyException();
		else
			edifici.put(building, b);
	}

	public void addOwner(String owner, String... apartments) throws PropertyException {
		if(apartments.length!=0) {
			Owner o = new Owner(owner, apartments);
			String[] ap = apartments;
			for(String s : ap) {
				String[] a = s.split(":");
				int n;
				if(a[0].length()==0 || a[1].length()==0)
					throw new PropertyException();
				else {
					try {
						n = Integer.parseInt(a[1]);
					}
					catch(NumberFormatException e) {
						return;
					}
					if(proprietari.containsKey(owner) || !edifici.containsKey(a[0]) || n>=edifici.get(a[0]).getTotapp() ) {
						throw new PropertyException();
					} 
					else {
						proprietari.put(owner, o);
						edifici.get(a[0]).setOwner(o, n);
					}
				}
			}
		} else {
			throw new PropertyException();
		}
		
	}

	/**
	 * Returns a map ( number of apartments => list of buildings ) 
	 * 
	 *//*
	public SortedMap<Integer, List<String>> getBuildings() {
		return edifici.values().stream()
				.sorted(Comparator.comparing(Building::getNome))
				.collect(Collectors.groupingBy(
						Building::getTotapp,
						TreeMap::new,
						Collectors.toList()
						));
	}*/

	public void addProfessionals(String profession, String... professionals) throws PropertyException {
				
	}

	/**
	 * Returns a map ( profession => number of workers )
	 *
	 */
	public SortedMap<String, Integer> getProfessions() {
		
		return null;
	}

	public int addRequest(String owner, String apartment, String profession) throws PropertyException {
		
		return 0;
	}

	public void assign(int requestN, String professional) throws PropertyException {
		
		
	}

	public List<Integer> getAssignedRequests() {
		
		return null;
	}

	
	public void charge(int requestN, int amount) throws PropertyException {
		
		
	}

	/**
	 * Returns the list of request ids
	 * 
	 */
	public List<Integer> getCompletedRequests() {
		
		return null;
	}
	
	/**
	 * Returns a map ( owner => total expenses )
	 * 
	 */
	public SortedMap<String, Integer> getCharges() {
		
		return null;
	}

	/**
	 * Returns the map ( building => ( profession => total expenses) ).
	 * Both buildings and professions are sorted alphabetically
	 * 
	 */
	public SortedMap<String, Map<String, Integer>> getChargesOfBuildings() {
		
		return null;
	}

}
